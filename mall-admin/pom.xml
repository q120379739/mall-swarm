<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.macro.mall</groupId>
    <artifactId>mall-admin</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>mall-admin</name>
    <description>mall-admin project for mall</description>

    <parent>
        <groupId>com.macro.mall</groupId>
        <artifactId>mall-swarm</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>com.macro.mall</groupId>
            <artifactId>mall-mbg</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
        </dependency>
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
        </dependency>
        <!--        -&#45;&#45;后期添加，抄高楼-->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.0.18.Final</version>
        </dependency>
        <!--        -&#45;&#45;后期添加，抄高楼-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-okhttp</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

<!--    <build>-->
<!--&lt;!&ndash;        <pluginManagement>&ndash;&gt;-->
<!--        &lt;!&ndash;pluginManagement字段需要特定的maven版本，不进行注释的话，plugins中不会出现docker&ndash;&gt;-->
<!--            <plugins>-->
<!--                <plugin>-->
<!--                    <groupId>org.springframework.boot</groupId>-->
<!--                    <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                    <version>${spring-boot.version}</version>-->
<!--                </plugin>-->

<!--                <plugin>-->
<!--                    &lt;!&ndash;推荐使用io.fabic8进行打包构建&ndash;&gt;-->
<!--                    <groupId>io.fabric8</groupId>-->
<!--                    <artifactId>docker-maven-plugin</artifactId>-->
<!--                    <version>${docker.maven.plugin.version}</version>-->
<!--                    <executions>-->
<!--                        &lt;!&ndash;如果想在项目打包时构建镜像添加&ndash;&gt;-->
<!--                        <execution>-->
<!--                            <id>build-image</id>-->
<!--                            <phase>package</phase>-->
<!--                            <goals>-->
<!--                                &lt;!&ndash;自定义maven动作&ndash;&gt;-->
<!--                                <goal>build</goal>-->
<!--                                <goal>push</goal>-->
<!--                            </goals>-->
<!--                        </execution>-->
<!--                    </executions>-->
<!--                    <configuration>-->
<!--                        <authConfig>-->
<!--                            &lt;!&ndash;harbor仓库账号密码&ndash;&gt;-->
<!--                            <username>admin</username>-->
<!--                            <password>123456</password>-->
<!--                        </authConfig>-->
<!--                        <pushRegistry>http://${docker.registry}</pushRegistry>-->
<!--                        &lt;!&ndash; Docker 远程管理地址&ndash;&gt;-->
<!--                        <dockerHost>${docker.host}</dockerHost>-->
<!--                        <images>-->
<!--                            <image>-->
<!--                                &lt;!&ndash;定义镜像名称，/mall是你的仓库名，需要在harbor仓库预先创建项目。&ndash;&gt;-->
<!--                                <name>${docker.registry}/mall/${project.name}:${project.version}</name>-->
<!--                                &lt;!&ndash;定义镜像构建行为&ndash;&gt;-->
<!--                                <build>-->
<!--                                    &lt;!&ndash;定义基础镜像&ndash;&gt;-->
<!--&lt;!&ndash;                                    <from>java:8</from>&ndash;&gt;-->
<!--&lt;!&ndash;                                    <args>&ndash;&gt;-->
<!--&lt;!&ndash;                                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>&ndash;&gt;-->
<!--&lt;!&ndash;                                    </args>&ndash;&gt;-->
<!--                                    &lt;!&ndash; 指定dockerfile文件的位置&ndash;&gt;-->
<!--                                    <dockerFileDir>${project.basedir}/docker</dockerFileDir>-->
<!--                                    &lt;!&ndash;定义哪些文件拷贝到容器中&ndash;&gt;-->
<!--                                    <assembly>-->
<!--                                        &lt;!&ndash;只拷贝生成的jar包&ndash;&gt;-->
<!--                                        <descriptorRef>artifact</descriptorRef>-->
<!--                                        <targetDir>/work</targetDir>-->
<!--                                    </assembly>-->
<!--                                    &lt;!&ndash;定义容器启动命令，原有命令&ndash;&gt;-->
<!--                                    &lt;!&ndash;                                    <entryPoint>["java", "-jar","-Dspring.profiles.active=prod","/${project.build.finalName}.jar"]</entryPoint>&ndash;&gt;-->
<!--                                    &lt;!&ndash;定义容器启动命令，加入skywalkingAgent，定义backend_service=172.16.33.163:11800&ndash;&gt;-->
<!--&lt;!&ndash;                                    <entryPoint>["java","-Dapp.id=svc-${project.name}","-javaagent:/var/logs/skywalking-agent.jar","-Dskywalking.agent.service_name=svc-${project.name}","-Dskywalking.collector.backend_service=172.16.33.163:11800","-jar","-Dspring.profiles.active=prod","/${project.build.finalName}.jar"]</entryPoint>&ndash;&gt;-->

<!--                                    &lt;!&ndash;定义维护者&ndash;&gt;-->
<!--                                    <maintainer>macrozheng</maintainer>-->
<!--                                </build>-->
<!--                            </image>-->
<!--                        </images>-->
<!--                    </configuration>-->
<!--                </plugin>-->
<!--            </plugins>-->
<!--&lt;!&ndash;        </pluginManagement>&ndash;&gt;-->
<!--    </build>-->
</project>
